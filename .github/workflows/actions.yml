name: experimental build XPTools

on:
  push:
    branches:
    - feat_workflow_meikelm
        
permissions:
  contents: read

jobs:
#  build-windows:
#    runs-on: windows-2022
#    steps:
#    - name: Checkout repo
#      uses: actions/checkout@v3
#      with:
#        submodules: true
#    - name: Add MSBuild to PATH
#      uses: microsoft/setup-msbuild@v1.1
#    - name: Build .exe
#      working-directory: ${{env.GITHUB_WORKSPACE}}
#      # Add additional options to the MSBuild command line here (like platform or verbosity level).
#      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference 
#      run: |
#        msbuild /m /p:Configuration=Release /p:Platform="x64" /t:DSFTool /t:DDSTool /t:XGrinder /t:ObjView msvc\XPTools.sln
#        move msvc\DDSTool\Release\DDSTool.exe msvc\
#        move msvc\DSFTool\Release\DSFTool.exe msvc\
#        move msvc\XGrinder\Release\XGrinder.exe msvc\
#        move msvc\ObjView\Release\Objview.exe msvc\
#    - name: Archive build result
#      uses: actions/upload-artifact@v3
#      with:
#        name: xpt_release_build
 #       path: msvc/*.exe
          
  build-mac:
    runs-on: macos-11
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: yes
      - name: Setup Credentials
        uses: apple-actions/import-codesign-certs@v2
        with: 
          p12-file-base64: ${{ secrets.APPLE_DEV_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_DEV_CERTIFICATE_PASSWORD }}
#      - name: Build Libs
#        run: |
#          git submodule init
#          git submodule update libs
#          cd libs
#          make -j$(sysctl -n hw.logicalcpu)
      - name: Build App
        run: |
          xcodebuild -scheme "XGrinder" -config Release -project SceneryTools.xcodeproj -archivePath build/XPT.xcarchive CODE_SIGN_STYLE="Manual" CODE_SIGN_IDENTITY="Developer ID Application: Laminar Research (LPH4NFE92D)" archive | xcpretty && exit ${PIPESTATUS[0]}
      - name: Notarize App
        run: |
          ./scripts/notarization.sh XGrinder.zip build/XPT.xcarchive/Products/Applications/XGrinder.app staple
#          ./scripts/notarization.sh ObjView.zip build/XPT.xcarchive/Products/Applications/ObjView.app staple
#          ./scripts/notarization.sh DDSTool.zip build/XPT.xcarchive/Products/usr/local/bin/DDSTool staple
#          ./scripts/notarization.sh DSFTool.zip build/XPT.xcarchive/Products/usr/local/bin/DSFTool staple
      - name: Archive build result
        uses: actions/upload-artifact@v3
        with:
          name: xpt_release_build
          path: build/WED.xcarchive/Products
#          path: build/XPT.xcarchive/Products
          
#  build-linux:
#    runs-on: ubuntu-22.04
#    # we need fltk-dev and python 2.7
#    container:
#        image: ghcr.io/x-plane/xptools_builder:latest
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v3
#        with:
#          submodules: true
#      - name: Build Libs
#        run: |
#          git config --global --add safe.directory /__w/xptools/xptools
#          git submodule init
#          git submodule update libs
#          cd libs
#          make -j$(nproc)
#      - name: Build binary
#        run: |
#          make -s -C . conf=release_opt -j$(nproc) DDSTool DSFTool XGrinder ObjView
#      - name: Archive build result
#        uses: actions/upload-artifact@v3
#        with:
#          name: xpt_release_build
#          path: |
#             build/Linux/release_opt/DDSTool
#             build/Linux/release_opt/DSFTool
#             build/Linux/release_opt/XGrinder
#             build/Linux/release_opt/ObjView

#  make-zips:
#    runs-on: ubuntu-latest
#    needs: [build-windows, build-mac, build-linux]
#    steps:
#    - name: Checkout repo
#      uses: actions/checkout@v3
#    - name: get build results
#      uses: actions/download-artifact@v3
#      with:
#        name: xpt_release_build
#    - name: zip files
#      run: |
#          version=$(awk '/XPT_PACKAGE_VER[\s\t]/ {gsub(/"/,""); print $3}' <src/XPTools/version.h)
#          echo $version
#          mv src/XPTools/README* .
#          rm README.ObjConverter README.md
#          mv src/DSFTools/README.* .
#          ls -l
#          mkdir tools
#          mv DDSTool.exe DSFTool.exe tools/
#          zip -r xptools_win_$version README* XGrinder.exe tools Objview.exe
#          rm -f tools/*
#          mv DDSTool DSFTool tools/
#          chmod a+x XGrinder ObjView tools/*
#          zip -r xptools_lin_$version README* XGrinder tools ObjView
#          rm -f tools/*
#          mv Applications/*.app .
#          mv usr/local/bin/*Tool tools/
#          chmod a+x XGrinder.app/Contents/MacOS/XGrinder
#          chmod a+x ObjView.app/Contents/MacOS/ObjView
#          chmod a+x tools/*
#          zip -r xptools_mac_$version README* XGrinder.app tools ObjView.app
#    - name: copy to server           # run this conditional on being a "Release" or a special trigger
#      uses: appleboy/scp-action@master
#      with:
#        host: files.x-plane.com
#        username: ${{ secrets.USERNAME }}
#        key: ${{ secrets.KEY }}      # private ssh key, public key goes on host
#        source: xptools_*.zip            # scp will overwrite target. find a way to check & NOT overwrite
#        target: "public/xpt/"
#    - name: Archive zipfiles
#      uses: actions/upload-artifact@v3
#      with:
#        name: xpt_release_build
#        path: ./xptools_*.zip
